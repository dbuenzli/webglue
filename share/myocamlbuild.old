(*---------------------------------------------------------------------------
   Copyright 2011 Daniel C. Bünzli. All rights reserved.
   Distributed under a BSD license, see license at the end of the file.
   %%PROJECTNAME%% version %%VERSION%%
  ---------------------------------------------------------------------------*)

open Ocamlbuild_plugin
    
let webglue_rules webglue =
  let pct_encode s = 
    let b = Buffer.create 256 in
    let unreserved i = 
      0x41 <= i && i <= 0x5A || 0x61 <= i && i <= 0x7A || 
      0x30 <= i && i <= 0x39 || i = 0x2D || i = 0x2E || i = 0x5F || i = 0x7E
    in
    for k = 0 to (String.length s) - 1 do 
      let i = Char.code s.[k] in 
      if unreserved i then Buffer.add_char b s.[k] else
      begin 
	Buffer.add_char b '%';
	Buffer.add_string b (Printf.sprintf "%02X" i)
      end
    done;
    Buffer.contents b      
  in
  let pct_decode s =                (* warning assumes encoded by pct_encode. *)
    let b = Buffer.create 256 in
    let len = String.length s in
    let k = ref 0 in
    while (!k < len) do 
      if s.[!k] <> '%' then (Buffer.add_char b s.[!k]) else
      begin 
	incr k;
	let hex_ord i = if i <= 0x39 then i - 0x30 else i - 55 in 
	let h = hex_ord (Char.code s.[!k]) in
	incr k;
	let l = hex_ord (Char.code s.[!k]) in
	Buffer.add_char b (Char.chr (h * 16 + l));
      end;
      incr k;
    done;
    Buffer.contents b
  in  
  let parse_deps f = 
    let split l = 
      let p1, p2 = String.index l ':', String.rindex l ':' in
      if p1 = p2 then raise Exit else
      let f = String.sub l (p1 + 1) (p2 - p1 - 1) in
      let v = String.sub l (p2 + 1) (String.length l - p2 - 1) in
      match String.sub l 0 p1 with 
      | "val" -> `Val (f, v)
      | "file" -> `File f
      | "uri" -> `Uri (f, v)
      | _ -> raise Exit
    in
    try (List.rev_map split (string_list_of_file f))
    with Exit -> failwith "invalid webglue dependency format"
  in
  let building_uris = ref StringSet.empty in             (* cycle prevention *)
  let build_deps ?(uri_refs = false) build file =
    let deps = parse_deps file in 
    let rec dependify acc = function 
      | `Val (m, k) -> 
	  [(Pathname.remove_extension m) ^ "+" ^ (pct_encode k) ^ ".val"] :: acc
      | `File f -> [f] :: acc
      | `Map m -> [Pathname.update_extension "odeps" m]	:: acc
      | `Uri (m, u) -> 
	  let t = (Pathname.remove_extension m ) ^ "+" ^ (pct_encode u) in
	  if not uri_refs then [t ^ ".ouri"] :: acc else
	  if StringSet.mem u !building_uris then acc else
	  [t ^ ".ouri"] :: [t ^ ".ourefs"] :: acc
    in
    List.iter Outcome.ignore_good (build (List.fold_left dependify [] deps));
  in

  rule "webglue: map -> deps"
    ~dep: "%.map"
    ~prod: "%.deps" 
    begin fun env build -> 
      let m = (env "%.map") in
      let mid = Pathname.basename (env "%") in
      let tags = tags_of_pathname m ++ "webglue" ++ "deps" ++ "map" in 
      Cmd (S [A webglue; A "deps"; T tags; A "-o"; P (env "%.deps"); 
	      P mid])
     end;

  rule "webglue: map & deps -> omap"
    ~deps: ["%.map"; "%.deps"]
    ~stamp: "%.omap" 
    (fun env build -> build_deps build (env "%.deps"); Cmd N);

  rule "webglue: omap -> val"
    ~dep: "%(id).omap"
    ~prod: "%(id)+%(key).val"
    begin fun env build ->
      let m = env "%(id).map" in
      let mid = Pathname.basename (env "%(id)") in
      let v = pct_decode (Pathname.basename (env "%(key)")) in
      let tags = tags_of_pathname m ++ "webglue" ++ "get" in 
      Cmd (S [A webglue; A "get"; T tags; A "-o"; P (env "%(id)+%(key).val");
	      P mid; P v])
    end;

  rule "webglue: omap -> udeps"
    ~dep:"%(id).omap"
    ~prod: "%(id)+%(uri).udeps"
    begin fun env build ->
      let m = env "%(id).map" in
      let mid = Pathname.basename (env "%(id)") in
      let uri = pct_decode (Pathname.basename (env "%(uri)")) in
      let tags = tags_of_pathname m ++ "webglue" ++ "deps" ++ "uri" in 
      Cmd (S [A webglue; A "deps"; T tags; A "-o"; 
	      P (env "%(id)+%(uri).udeps"); P mid; P uri])
    end;
    
  rule "webglue: uri -> ouri"
    ~dep:"%(id)+%(uri).uri"
    ~stamp:"%(id)+%(uri).ouri"
    begin fun env build -> 
      build_deps build (env "%(id)+%(uri).uri"); 
      let m = env "%(id).map" in 
      let mid = Pathname.basename (env "%(id)") in 
      let uri = pct_decode (Pathname.basename (env "%(uri)")) in 
      let tags = tags_of_pathname m ++ "webglue" ++ "contents" in 
      Cmd (S [A webglue; A "content"; P mid; T tags; P uri; ])
    end;

  rule "webglue: uri -> urefs"
    ~dep:"%(id)+%(uri).uri"
    ~prod:"%(id)+%(uri).urefs"
    begin fun env build ->
      let m = env "%(id).map" in
      let mid = Pathname.basename (env "%(id)") in
      let uri = pct_decode (Pathname.basename (env "%(uri)")) in
      let tags = tags_of_pathname m ++ "webglue" ++ "targets" ++ "uri-refs" in 
      Cmd (S [A webglue; A "targets"; T tags; A "-o"; 
	      P (env "%(id)+%(uri).urefs"); A "uri-refs"; P mid; P uri])
    end;

  rule "webglue: urefs -> ourefs"
    ~dep:"%(id)+%(uri).urefs"
    ~stamp:"%(id)+%(uri).ourefs"
    begin fun env build -> 
      let uri = pct_decode (Pathname.basename (env "%(uri)")) in
      building_uris := StringSet.add uri !building_uris;
      build_deps ~uri_refs:true build (env "%(id)+%(uri).urefs"); Cmd N
    end;
  
  rule "webglue: omap -> .uris"
    ~dep:"%.omap"
    ~prod:"%.uris"
    begin fun env build ->
      let m = env "%.map" in
      let mid = Pathname.basename (env "%") in
      let tags = tags_of_pathname m ++ "webglue" ++ "uris" in
      Cmd (S [A webglue; A "uris"; T tags; A "-o"; P (env "%.uris"); 
	      A "uris"; P mid])
    end;

  rule "webglue: .uris -> .ouris"
    ~dep: "%.uris"
    ~stamp: "%.ouris"
    (fun env build -> build_deps build (env "%.uris"); Cmd N);

  rule "webglue: .uris -> .site"
    ~deps: ["%.uris"; "%.ouris"]
    ~stamp: "%.site"
    (fun env build -> build_deps ~uri_refs:true build (env "%.uris"); Cmd N);


  (* Dependencies are looked up in source tree, but reported in build
     tree (hence the --relative-to) *)

  pflag [ "webglue"; "targets" ] "map_dir" 
    (fun d -> S [ A "-M"; P (Pathname.pwd / d)]); 
  flag [ "webglue"; "targets" ] (S [A "--relative-to"; P Pathname.pwd]);

  pflag [ "webglue"; "uris" ] "map_dir" (fun d -> S [ A "-M"; P d]);
  pflag [ "webglue"; "get" ] "map_dir" (fun d -> S [ A "-M"; P d]);

  pflag [ "webglue"; "contents" ] "map_dir" (fun d -> S [ A "-M"; P d]);

  pflag [ "webglue"; "contents" ] "root" (fun d -> S [ P d]);

  pflag [ "webglue" ] "format_dir" (fun d -> S [ A "-F"; P d]); 
  pflag [ "webglue"; ] "conf" (fun c -> S [ A "--conf"; A c]);
  flag [ "webglue"; "verbose" ] (A "-v");
;;

dispatch begin function
  | Before_rules -> webglue_rules "webglue";
  | _ -> ()
end



(*---------------------------------------------------------------------------
   Copyright 2011 Daniel C. Bünzli.
   All rights reserved.

   Redistribution and use in source and binary forms, with or without
   modification, are permitted provided that the following conditions
   are met:
     
   1. Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.

   2. Redistributions in binary form must reproduce the above
      copyright notice, this list of conditions and the following
      disclaimer in the documentation and/or other materials provided
      with the distribution.

   3. Neither the name of the Daniel C. Bünzli nor the names of
      contributors may be used to endorse or promote products derived
      from this software without specific prior written permission.

   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
   THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
   OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  ---------------------------------------------------------------------------*)
